{"version":3,"sources":["axios.js","Components/common/Input/index.js","Components/common/Button/index.js","Components/AddNote/index.js","Components/Notes/APIs/constants.js","Components/Notes/APIs/action.js","Components/Notes/index.js","dataSource/reducer.js","Components/Notes/APIs/reducer.js","dataSource/store.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Input","props","className","label","type","name","value","onChange","e","changeHandler","target","Button","disabled","btnClass","onClick","clickHandler","AddNote","state","newNote","setState","saveForm","id","data","details","modifiedNote","notesList","find","item","moreNotes","push","length","patch","then","resp","status","reloadNotes","catch","err","console","log","post","this","Component","connect","get","ACTION","fetchNotes","dispatch","Notes","notes","showAddSubNote","loadHandler","addSubnote","deleteNote","delete","allNotes","map","note","subNote","bindActionCreators","rootReducer","combineReducers","NotesReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c3e54eac.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:4000',\r\n})\r\n\r\nexport default instance","import React from 'react'\r\n\r\nconst Input = (props) => {\r\n\r\n    let changeHandler = (e) => {\r\n        props.changeHandler(e.target.name, e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label>{props.label} : </label>\r\n            <input type={props.type} name={props.name} value={props.value} onChange={(e) => changeHandler(e)} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Input","import React from 'react'\r\n\r\nimport './style.css'\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <button type={props.type} disabled={props.disabled} className={props.btnClass} onClick={props.clickHandler}>\r\n                {props.value}\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Button","import React, { Component } from 'react'\r\nimport axios from '../../axios'\r\n\r\nimport Input from '../common/Input';\r\nimport Button from '../common/Button'\r\nimport { connect } from 'react-redux';\r\nimport get from 'lodash/get';\r\n\r\nimport './style.css'\r\n\r\nclass AddNote extends Component {\r\n\r\n    state = {\r\n        newNote: ''\r\n    }\r\n\r\n    changeHandler = (name, value) => {\r\n        this.setState({[name]: value})\r\n    }\r\n\r\n    saveForm = (id) => {\r\n        const {newNote} = this.state;\r\n\r\n        const data = {\r\n            details: newNote\r\n        }\r\n        if(!id){\r\n            axios.post('/notes',data)\r\n                 .then((resp) => resp.status===201 && this.props.reloadNotes())\r\n                 .catch(err => console.log(\"Error occurred while posting a new note:\", err))\r\n            }\r\n            else {\r\n                const {notesList} = this.props;\r\n\r\n                let modifiedNote = notesList.find(item => item.id === id);\r\n                    if(modifiedNote.moreNotes){\r\n                        modifiedNote.moreNotes.push (\r\n                            {\r\n                                id: +`${id}.${modifiedNote.moreNotes.length + 1}`,\r\n                                details: newNote,\r\n                            }\r\n                        )\r\n                    }\r\n                    else {\r\n                        modifiedNote.moreNotes = [{\r\n                            id: +`${id}.${1}`,\r\n                            details: newNote,\r\n                        }]\r\n                    }\r\n                axios.patch(`/notes/${id}`, modifiedNote)\r\n                .then((resp) => resp.status===200 && this.props.reloadNotes())\r\n                .catch(err => console.log(\"Error occurred while posting a new sub note:\", err))\r\n            }\r\n    }\r\n\r\n    render() {\r\n        const {newNote} = this.state,\r\n                {id=0} = this.props;\r\n        \r\n        return (\r\n            <div className=\"add-note\">\r\n                <Input type=\"text\" name=\"newNote\" value={newNote} label=\"Add a new Note\" changeHandler={this.changeHandler} />\r\n                <Button type=\"button\" btnClass=\"btn btn-new\" disabled={newNote.length===0} clickHandler={() => this.saveForm(id)} value=\"Add Note\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { notesList : get(state, 'NotesReducer.notesList', [])}\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddNote)","export const ACTION = {\r\n    FETCH_NOTES: 'FETCH_NOTES'\r\n}","import {ACTION} from './constants'\r\n\r\nexport const fetchNotes = (data) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: ACTION.FETCH_NOTES,\r\n            data,\r\n        })\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport get from 'lodash/get';\r\nimport { bindActionCreators } from 'redux';\r\nimport axios from '../../axios'\r\n\r\nimport AddNote from '../AddNote'\r\nimport {fetchNotes} from './APIs/action'\r\nimport Button from '../common/Button'\r\nimport './style.css'\r\n\r\nclass Notes extends Component{\r\n\r\n    state = {\r\n        notes: [],\r\n        showAddSubNote: 0,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadHandler();\r\n    }\r\n\r\n    loadHandler = () => {\r\n        axios.get('/notes')\r\n             .then((resp) => {resp.status === 200 && this.props.fetchNotes(resp.data)})\r\n             .catch((err) => console.log('Error Occured: ', err))\r\n    }\r\n\r\n    addSubnote = (id) => {\r\n        this.setState({showAddSubNote: id})\r\n    }\r\n\r\n    deleteNote = (id) => {\r\n        axios.delete(`/notes/${id}`)\r\n             .then((resp) => {\r\n                 if(resp.status === 200) {\r\n                     this.loadHandler()\r\n                 }\r\n             })\r\n             .catch((err) => console.log('Error Occured: ', err))\r\n    }\r\n\r\n\r\n    render() {\r\n        const {notesList} = this.props;\r\n\r\n        const allNotes = notesList && notesList.map((note) => {\r\n            debugger\r\n            return (\r\n                <li className=\"note\">\r\n                    <p><span>{note.id} : </span>{note.details}</p>\r\n                    <div className=\"btn-group\">\r\n                        <Button type=\"button\" btnClass=\"btn btn-danger\" clickHandler={() => this.deleteNote(note.id)} value=\"Delete Note\"/>\r\n                        <Button type=\"button\" btnClass=\"btn btn-success\" value=\"Add Sub Note\" clickHandler={() => this.addSubnote(note.id)} />\r\n                    </div>\r\n                    {note.moreNotes &&\r\n                        <div className=\"sub-notes\">\r\n                            {note.moreNotes.map( (subNote) => {\r\n                                return (<li className=\"note\">\r\n                                <p><span>{subNote.id} : </span>{subNote.details}</p>\r\n                                <div className=\"btn-group\">\r\n                                    <Button type=\"button\" btnClass=\"btn btn-danger\" clickHandler={() => this.deleteNote(subNote.id)}  value=\"Delete Note\"/>\r\n                                    <Button type=\"button\" btnClass=\"btn btn-success\" value=\"Add Sub Note\" clickHandler={() => this.addSubnote(subNote.id)} />\r\n                                </div>\r\n                                {this.state.showAddSubNote === subNote.id  && <AddNote id={subNote.id} />}\r\n                                </li>)\r\n                            })}\r\n                        </div> \r\n                    }\r\n                    {this.state.showAddSubNote === note.id  && <AddNote id={note.id} />}\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"notes-app\">\r\n                <h2> Notes App </h2>\r\n\r\n                <AddNote reloadNotes={this.loadHandler} id={0} />\r\n\r\n                <div className=\"all-notes\">\r\n                    <ul>\r\n                        {allNotes}\r\n                    </ul>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { notesList : get(state, 'NotesReducer.notesList', [])}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        ...bindActionCreators({\r\n            fetchNotes\r\n        }, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Notes)","\r\nimport { combineReducers } from 'redux'\r\n\r\nimport NotesReducer from '../Components/Notes/APIs/reducer'\r\n\r\n const rootReducer = combineReducers({\r\n   NotesReducer,\r\n })\r\n\r\n export default rootReducer;","import get from 'lodash/get';\r\n\r\nimport {ACTION} from './constants'\r\n\r\nexport default function NotesReducer(state = {}, action){\r\n    switch(action.type) {\r\n        case ACTION.FETCH_NOTES:\r\n            return { ...state, notesList: get(action,'data', [])}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducer';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport Notes from './Components/Notes'\nimport store from './dataSource/store'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Notes />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}